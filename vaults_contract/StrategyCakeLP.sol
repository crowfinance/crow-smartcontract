// SPDX-License-Identifier: MIT

pragma solidity ^0.6.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/SafeERC20.sol";
import "@openzeppelin/contracts/math/SafeMath.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Pausable.sol";

interface IPancakeRouter {
    function addLiquidity(
        address tokenA,
        address tokenB,
        uint256 amountADesired,
        uint256 amountBDesired,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    )
        external
        returns (
            uint256 amountA,
            uint256 amountB,
            uint256 liquidity
        );

    function addLiquidityETH(
        address token,
        uint256 amountTokenDesired,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    )
        external
        payable
        returns (
            uint256 amountToken,
            uint256 amountETH,
            uint256 liquidity
        );

    function removeLiquidity(
        address tokenA,
        address tokenB,
        uint256 liquidity,
        uint256 amountAMin,
        uint256 amountBMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountA, uint256 amountB);

    function removeLiquidityETH(
        address token,
        uint256 liquidity,
        uint256 amountTokenMin,
        uint256 amountETHMin,
        address to,
        uint256 deadline
    ) external returns (uint256 amountToken, uint256 amountETH);

    function swapExactTokensForTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactETHForTokens(
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external payable returns (uint256[] memory amounts);

    function swapExactTokensForETH(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);

    function swapExactTokensForTokensSupportingFeeOnTransferTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external;

    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);
    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);
    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);
    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);
    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);
}

interface IPancakePair {
    function token0() external view returns (address);
    function token1() external view returns (address);
}

interface IMasterChef {
    function deposit(uint256 _pid, uint256 _amount) external;
    function withdraw(uint256 _pid, uint256 _amount) external;
    function enterStaking(uint256 _amount) external;
    function leaveStaking(uint256 _amount) external;
    function pendingCake(uint256 _pid, address _user) external view returns (uint256);
    function userInfo(uint256 _pid, address _user) external view returns (uint256, uint256);
    function emergencyWithdraw(uint256 _pid) external;
}

interface IGasPrice {
    function maxGasPrice() external returns (uint);
}

contract GasLimit {
    //limit gas price
    address public gasprice = address(0x4c3a585e57C79622d922295846Adcca96fd9f1e8);

    modifier gasLimit() {
        require(tx.gasprice <= IGasPrice(gasprice).maxGasPrice(), "gas is too high!");
        _;
    }
}

/**
 * @dev Implementation of a strategy to get yields from farming LP Pools in the Crow platform.
 *
 * This strat is currently compatible with all LP pools.
 */
contract StrategyCakeLP is Ownable, Pausable, GasLimit {
    using SafeERC20 for IERC20;
    using Address for address;
    using SafeMath for uint256;

    /**
     * @dev Tokens Used:
     * {wbnb} - Required for liquidity routing when doing swaps.
     * {cake} - Token generated by staking our funds. In this case it's the {cake} token.
     * {crow} - Crow token, used to send funds to the treasury.
     * {lpPair} - Token that the strategy maximizes. The same token that users deposit in the vault.
     * {lpToken0, lpToken1} - Tokens that the strategy maximizes. IUniswapV2Pair tokens
     */
    address public constant wbnb = address(0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c);
    address public constant cake = address(0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82);
    address public constant crow = address(0xcc2E12a9b5b75360c6FBf23B584c275D52cDdb0E);
    address public lpPair;
    address public lpToken0;
    address public lpToken1;

    /**
     * @dev Third Party Contracts:
     * {masterChef} - MasterChef contract. Stake Tokens, get rewards.
     * {unirouter} - PancakeSwap unirouter v2
     * {aperouter} - ApeSwap unirouter
     * {poolId} - MasterChef pool id
     */
    address constant public masterChef = address(0x73feaa1eE314F8c655E354234017bE2193C9E24E);
    address constant public unirouter  = address(0x10ED43C718714eb63d5aA57B78B54704E256024E);
    address constant public aperouter  = address(0xC0788A3aD43d79aa53B09c2EaCc313A787d1d607);
    uint256 public poolId;

    /**
     * @dev crow Contracts:
     * {treasury} - Address of the CrowFinance treasury
     * {vault} - Address of the vault that controls the strategy's funds.
     */
    address public constant treasury = address(0x43C74721856Da144D47Caa62aB04966A9Ae835E0);
    address public vault;

    /**
     * @dev Distribution of fees earned. This allocations relative to the % implemented on chargeFees().
     * Current implementation separates 2.2% for fees.
     *
     * {REWARDS_FEE} - 1.5% of the harvest is used to market buy crow and sent to the treasury [Crow]
     * {TREASURY_FEE} - 0.5% goes to the treasury. [wBNB]
     * {CALL_FEE} - 0.2% goes to whoever executes the harvest function as gas subsidy. [wBNB]
     * {MAX_FEE} - Aux const used to safely calc the correct amounts.
     *
     * {WITHDRAWAL_FEE} - Fee taxed when a user withdraws funds. 5 === 0.05% fee.
     * {WITHDRAWAL_MAX} - Aux const used to safely calc the correct amounts.
     */
    uint256 public constant REWARDS_FEE = 682;
    uint256 public constant TREASURY_FEE = 227;
    uint256 public constant CALL_FEE = 91;
    uint256 public constant MAX_FEE = 1000;

    uint256 public constant WITHDRAWAL_FEE = 5;
    uint256 public constant WITHDRAWAL_MAX = 10000;

    /**
     * @dev Routes we take to swap tokens using PancakeSwap.
     * {cakeToWbnbRoute} - Route we take to get from {cake} into {wbnb}.
     * {wbnbToCrowRoute} - Route we take to get from {wbnb} into {crow}.
     * {cakeToLp0Route} - Route we take to get from {cake} into {lpToken0}.
     * {cakeToLp1Route} - Route we take to get from {cake} into {lpToken1}.
     * {useNewPancakeRouter} - If true use new Pancake Router to swap {wbnb} to {crow} via new router
     */
    address[] public cakeToWbnbRoute = [cake, wbnb];
    address[] public wbnbToCrowRoute = [wbnb, crow];
    address[] public cakeToLp0Route;
    address[] public cakeToLp1Route;

    /**
     * @dev Event that is fired each time someone harvests the strat.
     */
    event StratHarvest(address indexed harvester);

    /**
     * @dev Initializes the strategy with the token to maximize.
     */

    constructor(
        address _lpPair,
        uint256 _poolId,
        address _vault
    ) public {
        lpPair = _lpPair;
        lpToken0 = IPancakePair(lpPair).token0();
        lpToken1 = IPancakePair(lpPair).token1();
        poolId = _poolId;
        vault = _vault;

        if (lpToken0 == wbnb) {
            cakeToLp0Route = [cake, wbnb];
        } else if (lpToken0 != cake) {
            cakeToLp0Route = [cake, wbnb, lpToken0];
        }

        if (lpToken1 == wbnb) {
            cakeToLp1Route = [cake, wbnb];
        } else {
            cakeToLp1Route = [cake, wbnb, lpToken1];
        }

        IERC20(lpPair).safeApprove(masterChef, uint(-1));
        IERC20(cake).safeApprove(unirouter, uint(-1));
        IERC20(wbnb).safeApprove(unirouter, uint(-1));
        IERC20(wbnb).safeApprove(aperouter, uint(-1));

        IERC20(lpToken0).safeApprove(unirouter, 0);
        IERC20(lpToken0).safeApprove(unirouter, uint(-1));

        IERC20(lpToken1).safeApprove(unirouter, 0);
        IERC20(lpToken1).safeApprove(unirouter, uint(-1));
    }

    /**
     * @dev Function that puts the funds to work.
     * It gets called whenever someone deposits in the strategy's vault contract.
     * It deposits {lpPair} in the MasterChef to farm {cake}
     */
    function deposit() public whenNotPaused {
        uint256 pairBal = IERC20(lpPair).balanceOf(address(this));

        if (pairBal > 0) {
            IMasterChef(masterChef).deposit(poolId, pairBal);
        }
    }

    /**
     * @dev Withdraws funds and sents them back to the vault.
     * It withdraws {lpPair} from the MasterChef.
     * The available {lpPair} minus fees is returned to the vault.
     */
    function withdraw(uint256 _amount) external {
        require(msg.sender == vault, "!vault");

        uint256 pairBal = IERC20(lpPair).balanceOf(address(this));

        if (pairBal < _amount) {
            IMasterChef(masterChef).withdraw(poolId, _amount.sub(pairBal));
            pairBal = IERC20(lpPair).balanceOf(address(this));
        }

        if (pairBal > _amount) {
            pairBal = _amount;
        }

        uint256 withdrawalFee = pairBal.mul(WITHDRAWAL_FEE).div(WITHDRAWAL_MAX);
        IERC20(lpPair).safeTransfer(treasury, withdrawalFee);
        IERC20(lpPair).safeTransfer(vault, pairBal.sub(withdrawalFee));
    }

    /**
     * @dev Core function of the strat, in charge of collecting and re-investing rewards.
     * 1. It claims rewards from the MasterChef.
     * 2. It charges the system fees to simplify the split.
     * 3. It swaps the {cake} token for {lpToken0} & {lpToken1}
     * 4. Adds more liquidity to the pool.
     * 5. It deposits the new LP tokens.
     */
    function harvest() external whenNotPaused gasLimit {
        require(!Address.isContract(msg.sender), "!contract");
        IMasterChef(masterChef).deposit(poolId, 0);
        chargeFees();
        addLiquidity();
        deposit();

        emit StratHarvest(msg.sender);
    }

    /**
     * @dev Takes out 2.2% as system fees from the rewards.
     * 0.2% (wbnb) -> Caller Fee
     * 0.5% (wbnb) -> Treasury fee
     * 1.5% (crow) -> Treasury for distribute in talons pools later
     */
    function chargeFees() internal {
        uint256 toWbnb = IERC20(cake).balanceOf(address(this)).mul(22).div(1000);
        IPancakeRouter(unirouter)
            .swapExactTokensForTokens(
            toWbnb,
            0,
            cakeToWbnbRoute,
            address(this),
            now.add(600)
        );

        uint256 wbnbBal = IERC20(wbnb).balanceOf(address(this));

        uint256 callFee = wbnbBal.mul(CALL_FEE).div(MAX_FEE);
        IERC20(wbnb).safeTransfer(msg.sender, callFee);

        uint256 treasuryFee = wbnbBal.mul(TREASURY_FEE).div(MAX_FEE);
        IERC20(wbnb).safeTransfer(treasury, treasuryFee);

        uint256 rewardsFee = wbnbBal.sub(callFee).sub(treasuryFee);

        IPancakeRouter(aperouter).swapExactTokensForTokens(rewardsFee, 0, wbnbToCrowRoute, treasury, now.add(600));
    }

    /**
     * @dev Swaps {cake} for {lpToken0}, {lpToken1} & {wbnb} using PancakeSwap.
     */
    function addLiquidity() internal {
        uint256 cakeHalf = IERC20(cake).balanceOf(address(this)).div(2);

        if (lpToken0 != cake) {
            IPancakeRouter(unirouter).swapExactTokensForTokens(cakeHalf, 0, cakeToLp0Route, address(this), now.add(600));
        }

        if (lpToken1 != cake) {
            IPancakeRouter(unirouter).swapExactTokensForTokens(cakeHalf, 0, cakeToLp1Route, address(this), now.add(600));
        }

        uint256 lp0Bal = IERC20(lpToken0).balanceOf(address(this));
        uint256 lp1Bal = IERC20(lpToken1).balanceOf(address(this));
        IPancakeRouter(unirouter).addLiquidity(lpToken0, lpToken1, lp0Bal, lp1Bal, 1, 1, address(this), now.add(600));
    }

    /**
     * @dev Function to calculate the total underlaying {lpPair} held by the strat.
     * It takes into account both the funds in hand, as the funds allocated in the MasterChef.
     */
    function balanceOf() public view returns (uint256) {
        return balanceOfLpPair().add(balanceOfPool());
    }

    /**
     * @dev It calculates how much {lpPair} the contract holds.
     */
    function balanceOfLpPair() public view returns (uint256) {
        return IERC20(lpPair).balanceOf(address(this));
    }

    /**
     * @dev It calculates how much {lpPair} the strategy has allocated in the MasterChef
     */
    function balanceOfPool() public view returns (uint256) {
        (uint256 _amount, ) = IMasterChef(masterChef).userInfo(poolId, address(this));
        return _amount;
    }

    /**
     * @dev Function that has to be called as part of strat migration. It sends all the available funds back to the
     * vault, ready to be migrated to the new strat.
     */

    function retireStrat() external onlyOwner {
        IMasterChef(masterChef).emergencyWithdraw(poolId);

        uint256 pairBal = IERC20(lpPair).balanceOf(address(this));
        IERC20(lpPair).transfer(vault, pairBal);
    }

    /**
     * @dev Pauses deposits. Withdraws all funds from the MasterChef, leaving rewards behind
     */
    function panic() public onlyOwner {
        pause();
        IMasterChef(masterChef).emergencyWithdraw(poolId);
    }

    /**
     * @dev Pauses the strat.
     */
    function pause() public onlyOwner {
        _pause();

        IERC20(lpPair).safeApprove(masterChef, 0);
        IERC20(cake).safeApprove(unirouter, 0);
        IERC20(wbnb).safeApprove(unirouter, 0);
        IERC20(wbnb).safeApprove(aperouter, 0);
        IERC20(lpToken0).safeApprove(unirouter, 0);
        IERC20(lpToken1).safeApprove(unirouter, 0);
    }

    /**
     * @dev Unpauses the strat.
     */
    function unpause() external onlyOwner {
        _unpause();

        IERC20(lpPair).safeApprove(masterChef, uint(-1));
        IERC20(cake).safeApprove(unirouter, uint(-1));
        IERC20(wbnb).safeApprove(unirouter, uint(-1));
        IERC20(wbnb).safeApprove(aperouter, uint(-1));

        IERC20(lpToken0).safeApprove(unirouter, 0);
        IERC20(lpToken0).safeApprove(unirouter, uint(-1));

        IERC20(lpToken1).safeApprove(unirouter, 0);
        IERC20(lpToken1).safeApprove(unirouter, uint(-1));
    }
}